#
# detailed syntax defined in
# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions
#
name: "Test suite"

on: [push, pull_request]

jobs:
  clang-format:
    runs-on: "ubuntu-20.04"
    env:
      CLANG_REQUIRE_VERSION: 13
      CLANG_FORMAT_FILE: ".clang-format"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Install Linux system dependencies"
        run: |
          python -m pip install --force-reinstall clang-format==${{ env.CLANG_REQUIRE_VERSION }}
          clang-format --version

      - name: "Run clang-format..."
        run: |
          files=$(find . \( -iname "*.h" -o -iname "*.c" -o -iname "*.cc" -o -iname "*.cpp" \) -not -path "./thirdparty/*")
          diff -u <(cat ${files}) <(clang-format ${files})

  cppcheck:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Install Linux system dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install cppcheck

      - name: "Run cppcheck..."
        run: |
          cppcheck --enable=all --language=c++ --std=c++11 -i sli/ --suppressions-list=.cppcheck_suppressions ./

  rstcheck:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          pip install rstcheck

      - name: "Run rstcheck..."
        run: |
          rstcheck -r doc/

  vale-action:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Vale documentation linting"
        uses: errata-ai/vale-action@v1.5.0
        # 1.0.1
        #with:
        #  config: https://raw.githubusercontent.com/terhorstd/nest-simulator/separated-checks-vale/.vale.ini
        env:
          # Required, set by GitHub actions automatically:
          # https://docs.github.com/en/actions/security-guides/automatic-token-authentication#about-the-github_token-secret
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  vale:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          sudo apt install python3-docutils
          wget --progress=dot:mega "https://github.com/errata-ai/vale/releases/download/v2.15.2/vale_2.15.2_Linux_64-bit.tar.gz"
          echo "7528175c995818bcb88b07574dd2e17c1aad13f5676880f43927bb8f673095aa  vale_2.15.2_Linux_64-bit.tar.gz" | sha256sum -c
          tar -xzf vale_2.15.2_Linux_64-bit.tar.gz

      - name: "Run vale..."
        run: |
          echo "Starting vale..."
          ./vale -v
          ./vale doc

  copyright_headers:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          pip install pydocstyle

      - name: "Check copyright headers..."
        run: |
          python build_support/check_copyright_headers.py

  unused_names:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          pip install pydocstyle

      - name: "Check for unused nest::names..."
        run: |
          python build_support/check_unused_names.py

  forbidden_types:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Check for forbidden types..."
        run: |
          ./build_support/check_forbidden_types.sh

  pydocstyle:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          pip install pydocstyle

      - name: "Run pydocstyle..."
        run: |
          pydocstyle pynest/

  mypy:
    runs-on: "ubuntu-20.04"
    #needs: [pydocstyle, pycodestyle, pylint, flake8]
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install Linux system dependencies"
        run: |
          pip install mypy matplotlib numpy scipy data-science-types

      - name: "Run mypy..."
        run: |
          mypy pynest/

  pytest-linux:
    runs-on: "ubuntu-20.04"
    needs: [build_linux]
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-20.04"]
        cpp_compiler: ["gcc"]
        NEST_BUILD_TYPE: ["FULL"]
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download last build...
        uses: actions/download-artifact@v3
        with:
          name: "${{ matrix.NEST_BUILD_TYPE }}-build-${{ matrix.os }}-${{ matrix.cpp_compiler }}"

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          pip install pytest pytest-cov pytest-doctestplus

      - name: "Run pytest..."
        run: |
          pytest pynest/

  pytest-mac:
    runs-on: "macos-latest"
    needs: [build_macos]
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          pip install pytest pytest-cov pytest-doctestplus

      - name: "Run pytest..."
        run: |
          pytest pynest/

  pylint:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install Linux system dependencies"
        run: |
          pip install pylint

      - name: "Run pylint..."
        run: |
          pylint --jobs=$(nproc) pynest/ testsuite/pytests/*.py testsuite/regressiontests/*.py

  flake8:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          pip install flake8

      - name: "Run flake8..."
        # Run flake8 on the entire repository
        run: |
          flake8 .

  sphinx-rtd:
    # as close as possible to the Readthedocs setup (system install cmake, pip install -r doc/requirements.txt)
    runs-on: "ubuntu-20.04"
    #if: ${{ always() }}
    needs: [pydocstyle, rstcheck, vale]
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          pip install -r doc/requirements.txt

      - name: "Test-build documentation"
        run: |
          mkdir -pv build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../install ..
          make html |& tee sphinx-output.log

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: |
            build/sphinx-output.log
            build/userdoc/html/

  sphinx-conda:
    # as close as possible to the suggested user docs build in the documentation
    runs-on: "ubuntu-20.04"
    if: ${{ always() }}
    needs: [pydocstyle]
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: "3.7"

      - name: Install conda dependencies
        shell: bash -l {0}
        run: |
          conda info
          conda env create -p conda

      - name: "Test-build documentation"
        shell: bash -l {0}
        run: |
          conda activate conda/
          mkdir -pv build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../install ..
          make html |& tee sphinx-output.log

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: |
            build/sphinx-output.log
            build/userdoc/html/

  static_checks:
    if: false
    env:
      xNEST_BUILD_TYPE: "STATIC_CODE_ANALYSIS"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Restore apt cache"
        uses: actions/cache@v2
        env:
          cache-name: "apt-cache"
        with:
          path: |
            !/var/cache/apt/archives/lock
            !/var/cache/apt/archives/partial
            /var/cache/apt
          key: ${{ runner.os }}-system-${{ env.cache-name }}-${{ hashFiles('**/environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-system-${{ env.cache-name }}-
            ${{ runner.os }}-system-

      - name: "Install Linux system dependencies"
        run: |
          sudo apt-get update
          # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
          sudo apt-get install libltdl-dev libreadline6-dev libncurses5-dev libgsl0-dev python3-all-dev jq libpcre3 libpcre3-dev libboost-all-dev
          sudo apt-get install openmpi-bin libopenmpi-dev libgsl0-dev tcl8.6 tcl8.6-dev tk8.6-dev
          sudo apt-get install libboost-filesystem-dev libboost-regex-dev libboost-wave-dev libboost-python-dev libboost-program-options-dev libboost-test-dev
          sudo apt-get install vera++
          sudo ldconfig
          g++ --version

      - name: "Restore pip cache"
        env:
          cache-name: "pip-cache"
        uses: actions/cache@v2
        with:
          path: |
            /opt/hostedtoolcache/Python/**/site-packages/*
            $HOME/.cache/pip
          key: ${{ runner.os }}-python-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.cache-name }}-
            ${{ runner.os }}-python-

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip setuptools
          # --force-reinstall required to ensure executable is linked from bin dir in PATH
          python -m pip install --force-reinstall clang-format==13.0
          python -c "import setuptools; print('package location:', setuptools.__file__)"
          python -m pip install --force-reinstall --upgrade scipy numpy pytest pytest-timeout pytest-xdist mpi4py cython matplotlib terminaltables pandoc pandas 'junitparser>=2'
          test \! -e "=2"   # assert junitparser is correctly quoted and '>' is not interpreted as shell redirect
          python -c "import pytest; print('package location:', pytest.__file__)"
          pip list

      - name: "Find changed files"
        run: |
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          echo "$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.after }})" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo "GITHUB_ENV = $GITHUB_ENV"
          cat $GITHUB_ENV

      - name: "Static Code Analysis"
        run: build_support/ci_build.sh
        env:
          xNEST_BUILD_TYPE: 'STATIC_CODE_ANALYSIS'
          CHANGED_FILES: ${{ env.CHANGED_FILES }}

  build_linux:
    if: ${{ always() && !contains(github.event.head_commit.message, 'ci skip') }}
    runs-on: ${{ matrix.os }}
    needs: [clang-format, mypy, copyright_headers, unused_names, forbidden_types, pylint, flake8]
    env:
      CXX_FLAGS: "-pedantic -Wextra -Woverloaded-virtual -Wno-unknown-pragmas"
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04"]
        cpp_compiler: ["gcc"]   #, "clang"]

        # available use flags (all default to "OFF"):
        # openmp, mpi, python, gsl, ltdl, boost, sionlib, libneurosim, optimize, warning, userdoc, music
        include:
        - os: "ubuntu-20.04"
          use:
          - "boost, optimize, warning"  # formerly "minimal"
          - "openmp, python, gsl, ltdl, boost, optimize, warning"  # formerly "openmp_only"
          - "mpi, python, gsl, ltdl, boost, optimize, warning"  # formerly "mpi_only"
          - "openmp, mpi, python, gsl, ltdl, boost, sionlib, libneurosim, optimize, warning"  # formerly "full"

    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Restore apt cache"
        uses: actions/cache@v2
        env:
          cache-name: "apt-cache"
        with:
          path: |
            !/var/cache/apt/archives/lock
            !/var/cache/apt/archives/partial
            /var/cache/apt
          key: ${{ runner.os }}-system-${{ env.cache-name }}-${{ hashFiles('**/environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-system-${{ env.cache-name }}-
            ${{ runner.os }}-system-

      - name: "Install Linux system dependencies"
        run: |
          sudo apt-get update
          # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
          sudo apt-get install ccache
          sudo apt-get install libltdl-dev libreadline6-dev libncurses5-dev libgsl0-dev python3-all-dev jq libpcre3 libpcre3-dev libboost-all-dev
          sudo apt-get install openmpi-bin libopenmpi-dev libgsl0-dev tcl8.6 tcl8.6-dev tk8.6-dev
          sudo apt-get install libboost-filesystem-dev libboost-regex-dev libboost-wave-dev libboost-python-dev libboost-program-options-dev libboost-test-dev
          sudo ldconfig

      - name: "Restore ccache"
        # Using CCache to re-use compiled objects from prior runs that have the same
        # source (hashed), compiler (mtime+size) and compile flags.
        env:
          cache-name: "ccache"
        uses: actions/cache@v2
        with:
          path: |
            $HOME/.ccache
            .ccache
            /home/runner/.ccache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.cpp_compiler }}-${{ matrix.NEST_BUILD_TYPE }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.cpp_compiler }}-${{ matrix.NEST_BUILD_TYPE }}
            ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.cpp_compiler }}
            ${{ runner.os }}-${{ env.cache-name }}
            ${{ runner.os }}

      - name: "Restore pip cache"
        env:
          cache-name: "pip-cache"
        uses: actions/cache@v2
        with:
          path: |
            /opt/hostedtoolcache/Python/**/site-packages/*
            $HOME/.cache/pip
          key: ${{ runner.os }}-python-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.cache-name }}-
            ${{ runner.os }}-python-

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip setuptools
          python -c "import setuptools; print('package location:', setuptools.__file__)"
          python -m pip install --force-reinstall --upgrade scipy 'junitparser>=2' numpy pytest pytest-timeout pytest-xdist mpi4py cython matplotlib terminaltables pandoc pandas
          test \! -e "=2"   # assert junitparser is correctly quoted and '>' is not interpreted as shell redirect
          python -c "import pytest; print('package location:', pytest.__file__)"
          pip list

      - name: "Install MUSIC"
        if: "${{ contains(matrix.use, 'music') }}"
        run: |
          chmod +x build_support/install_music.sh
          ./build_support/install_music.sh

      - name: "Install SIONlib"
        if: "${{ contains(matrix.use, 'sionlib') }}"
        run: |
          chmod +x build_support/install_sionlib.sh
          ./build_support/install_sionlib.sh

      - name: "Install LibNeurosim – WARNING WARNING NO PROPER PYTHON INSTALL!"
        if: "${{ contains(matrix.use, 'libneurosim') }}"
        run: |
          chmod +x build_support/install_csa-libneurosim.sh
          PYLIB_DIR="$(python3 -c "import sysconfig; print(sysconfig.get_path('include'))" | sed 's/include/lib/')"
          ./build_support/install_csa-libneurosim.sh $PYLIB_DIR

      - name: "Build NEST"
        run: |
          ccache -p
          ccache -s
          ccache -z

          # BEGIN formerly ./build_support/ci_build.sh 2>&1 | tee ci_build.sh.log
          env
          if [ "$xNEST_BUILD_COMPILER" = "CLANG" ]; then
              export CC=clang-11
              export CXX=clang++-11
          fi
          export CXX_FLAGS="-pedantic -Wextra -Wno-unknown-pragmas -D_GLIBCXX_ASSERTIONS"

          #export CXX_FLAGS="-pedantic -Wextra -D_GLIBCXX_ASSERTIONS"  # if "OPENMP_ONLY"

          # Do not use -pedantic because it triggers warnings from pynestkernel
          # that are difficult to filter automatically when parsing the log. 
          # See also https://github.com/cython/cython/pull/4687.
          #export CXX_FLAGS="-Wextra -Wno-unknown-pragmas -D_GLIBCXX_ASSERTIONS"  # if "FULL_MACOS"

          # initialize matplotlib backend
          mkdir -p $HOME/.matplotlib
          echo "backend : svg" > $HOME/.matplotlib/matplotlibrc

          echo
          echo "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +"
          echo "+               C O N F I G U R E   N E S T   B U I L D                       +"
          echo "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +"
          echo "MSGBLD0232: Setting configuration variables."

          NEST_VPATH="build"
          NEST_RESULT="result"
          mkdir -p "$NEST_VPATH/reports" "$NEST_RESULT"

          echo "MSGBLD0235: Running CMake."
          cd "$NEST_VPATH"
          cmake \
              -DCMAKE_INSTALL_PREFIX="$NEST_RESULT" \
              -DCMAKE_CXX_FLAGS="$CXX_FLAGS" \
              -Dwith-optimize=${{ contains(matrix.use, 'optimize') && 'ON' || 'OFF' }} \
              -Dwith-warning=${{ contains(matrix.use, 'warning') && 'ON' || 'OFF' }} \
              -Dwith-boost=${{ contains(matrix.use, 'boost') && 'ON' || 'OFF' }} \
              -Dwith-openmp=${{ contains(matrix.use, 'openmp') && 'ON' || 'OFF' }} \
              -Dwith-mpi=${{ contains(matrix.use, 'mpi') && 'ON' || 'OFF' }} \
              -Dwith-python=${{ contains(matrix.use, 'python') && 'ON' || 'OFF' }} \
              -Dwith-python=${{ contains(matrix.use, 'music') && '$HOME/.cache/music.install' || 'OFF' }} \
              -Dwith-gsl=${{ contains(matrix.use, 'gsl') && 'ON' || 'OFF' }} \
              -Dwith-ltdl=${{ contains(matrix.use, 'ltdl') && 'ON' || 'OFF' }} \
              -Dwith-readline=${{ contains(matrix.use, 'readline') && 'ON' || 'OFF' }} \
              -Dwith-sionlib=${{ contains(matrix.use, 'sionlib') && '$HOME/.cache/sionlib.install' || 'OFF' }} \
              -Dwith-libneurosim=${{ contains(matrix.use, 'libneurosim') && '$HOME/.cache/libneurosim.install' || 'OFF' }} \
              ..

          echo "MSGBLD0240: CMake configure completed."
          echo
          echo "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +"
          echo "+               B U I L D   N E S T                                           +"
          echo "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +"
          echo "MSGBLD0250: Running Make."
          make VERBOSE=1
          echo "MSGBLD0260: Make completed."
          echo
          echo "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +"
          echo "+               I N S T A L L   N E S T                                       +"
          echo "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +"
          echo "MSGBLD0270: Running make install."
          make install
          echo "MSGBLD0280: Make install completed."
          echo
          echo "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +"
          echo "+               R U N   N E S T   T E S T S U I T E                           +"
          echo "+ + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +"
          echo "MSGBLD0290: Running make installcheck."
          make VERBOSE=1 installcheck
          echo "MSGBLD0300: Make installcheck completed."
          echo "MSGBLD0340: Build completed."

          # END formerly ./build_support/ci_build.sh 2>&1 | tee ci_build.sh.log
          #
          #python build_support/parse_build_log.py ci_build.sh.log ${{ github.workspace }}
          ccache -s   # show ccache statistics
        env:
          CMAKE_C_COMPILER_LAUNCHER: ccache
          CMAKE_CXX_COMPILER_LAUNCHER: ccache

      - name: "Upload install and test results"
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: "build-logs-${{ matrix.os }}-${{ matrix.cpp_compiler }}-${{ matrix.use }}"
          path: |
            ci_build.sh.log
            install_manifest.txt
            **.log
            build/reports/**

      - name: "Upload binary artifacts"
        uses: actions/upload-artifact@v3
        #if: '${{ matrix.NEST_BUILD_TYPE }} == "FULL"'
        with:
          name: "build-${{ matrix.os }}-${{ matrix.cpp_compiler }}-${{ matrix.use }}"
          path: |
            build/**
            result/**

  build_linux_oldscript:
    #if: ${{ always() && !contains(github.event.head_commit.message, 'ci skip') }}
    if: false
    runs-on: ${{ matrix.os }}
    needs: [clang-format, mypy, copyright_headers, unused_names, forbidden_types, pylint, flake8]
    env:
      CXX_FLAGS: "-pedantic -Wextra -Woverloaded-virtual -Wno-unknown-pragmas"
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04"]
        cpp_compiler: ["gcc", "clang"]
        NEST_BUILD_TYPE: ["MINIMAL", "MPI_ONLY", "OPENMP_ONLY", "FULL"]
        exclude:
          - NEST_BUILD_TYPE: "MINIMAL"
            cpp_compiler: "clang"
            os: "ubuntu-20.04"
          - NEST_BUILD_TYPE: "MPI_ONLY"
            cpp_compiler: "clang"
            os: "ubuntu-20.04"
          - NEST_BUILD_TYPE: "OPENMP_ONLY"
            cpp_compiler: "clang"
            os: "ubuntu-20.04"
          - NEST_BUILD_TYPE: "FULL"
            cpp_compiler: "clang"
            os: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Find changed files"
        run: |
          echo "CHANGED_FILES<<EOF" >>$GITHUB_ENV
          echo "$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }})" >>$GITHUB_ENV
          echo 'EOF' >>$GITHUB_ENV

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Restore apt cache"
        uses: actions/cache@v2
        env:
          cache-name: "apt-cache"
        with:
          path: |
            !/var/cache/apt/archives/lock
            !/var/cache/apt/archives/partial
            /var/cache/apt
          key: ${{ runner.os }}-system-${{ env.cache-name }}-${{ hashFiles('**/environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-system-${{ env.cache-name }}-
            ${{ runner.os }}-system-

      - name: "Install Linux system dependencies"
        run: |
          sudo apt-get update
          # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
          sudo apt-get install ccache
          sudo apt-get install libltdl-dev libreadline6-dev libncurses5-dev libgsl0-dev python3-all-dev jq libpcre3 libpcre3-dev libboost-all-dev
          sudo apt-get install openmpi-bin libopenmpi-dev libgsl0-dev tcl8.6 tcl8.6-dev tk8.6-dev
          sudo apt-get install libboost-filesystem-dev libboost-regex-dev libboost-wave-dev libboost-python-dev libboost-program-options-dev libboost-test-dev
          sudo ldconfig
          g++ --version

      - name: "Restore ccache"
        # Using CCache to re-use compiled objects from prior runs that have the same
        # source (hashed), compiler (mtime+size) and compile flags.
        env:
          cache-name: "ccache"
        uses: actions/cache@v2
        with:
          path: |
            $HOME/.ccache
            .ccache
            /home/runner/.ccache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.NEST_BUILD_TYPE }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.NEST_BUILD_TYPE }}
            ${{ runner.os }}-${{ env.cache-name }}
            ${{ runner.os }}

      - name: "Restore pip cache"
        env:
          cache-name: "pip-cache"
        uses: actions/cache@v2
        with:
          path: |
            /opt/hostedtoolcache/Python/**/site-packages/*
            $HOME/.cache/pip
          key: ${{ runner.os }}-python-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.cache-name }}-
            ${{ runner.os }}-python-

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip setuptools
          python -c "import setuptools; print('package location:', setuptools.__file__)"
          python -m pip install --force-reinstall --upgrade scipy 'junitparser>=2' numpy pytest pytest-timeout pytest-xdist mpi4py cython matplotlib terminaltables pandoc pandas
          test \! -e "=2"   # assert junitparser is correctly quoted and '>' is not interpreted as shell redirect
          python -c "import pytest; print('package location:', pytest.__file__)"
          pip list

      - name: "Build NEST"
        run: |
          ccache -p
          ccache -s
          ccache -z
          ./build_support/ci_build.sh 2>&1 | tee ci_build.sh.log
          python build_support/parse_build_log.py ci_build.sh.log ${{ github.workspace }}
          ccache -s
        env:
          xNEST_BUILD_TYPE: ${{ matrix.NEST_BUILD_TYPE }}
          CMAKE_C_COMPILER_LAUNCHER: ccache
          CMAKE_CXX_COMPILER_LAUNCHER: ccache
          CHANGED_FILES: ${{ env.CHANGED_FILES }}
          #get changed files: https://github.com/marketplace/actions/get-changed-files

      - name: "Upload install and test results"
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: "${{ matrix.NEST_BUILD_TYPE }}-build-logs-${{ matrix.os }}-${{ matrix.cpp_compiler }}"
          path: |
            ci_build.sh.log
            install_manifest.txt
            **.log
            build/reports/**

      - name: "Upload binary artifacts"
        uses: actions/upload-artifact@v3
        if: '${{ matrix.NEST_BUILD_TYPE }} == "FULL"'
        with:
          name: "${{ matrix.NEST_BUILD_TYPE }}-build-${{ matrix.os }}-${{ matrix.cpp_compiler }}"
          path: |
            build/**
            result/**

  build_macos:
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
    runs-on: ${{ matrix.os }}
    needs: [clang-format, mypy, copyright_headers, unused_names, forbidden_types, pylint, flake8]
    env:
      CXX_FLAGS: "-pedantic -Wextra -Woverloaded-virtual -Wno-unknown-pragmas"
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        cpp_compiler: ["clang"]
        NEST_BUILD_TYPE: ["FULL_MACOS"]
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Find changed files"
        run: |
          echo "CHANGED_FILES<<EOF" >>$GITHUB_ENV
          echo "$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }})" >>$GITHUB_ENV
          echo 'EOF' >>$GITHUB_ENV

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install MacOS system dependencies"
        run: |
          brew install coreutils gsl open-mpi libomp automake autoconf libtool boost
          brew info python

      - name: "Restore pip cache"
        env:
          cache-name: "pip-cache"
        uses: actions/cache@v2
        with:
          path: |
            /opt/hostedtoolcache/Python/**/site-packages/*
            $HOME/.cache/pip
          key: ${{ runner.os }}-python-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.cache-name }}-
            ${{ runner.os }}-python-

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip setuptools
          python -c "import setuptools; print('package location:', setuptools.__file__)"
          python -m pip install --force-reinstall --upgrade scipy 'junitparser>=2' numpy pytest pytest-timeout pytest-xdist mpi4py cython matplotlib terminaltables pandoc pandas
          test \! -e "=2"   # assert junitparser is correctly quoted and '>' is not interpreted as shell redirect
          python -c "import pytest; print('package location:', pytest.__file__)"
          pip list

      - name: "Build NEST"
        run: |
          ./build_support/ci_build.sh 2>&1 | tee ci_build.sh.log
          python build_support/parse_build_log.py ci_build.sh.log ${{ github.workspace }}
        env:
          xNEST_BUILD_TYPE: ${{ matrix.NEST_BUILD_TYPE }}
          CHANGED_FILES: ${{ env.CHANGED_FILES }}
          #get changed files: https://github.com/marketplace/actions/get-changed-files

      - name: "Upload install and test results"
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: "${{ matrix.NEST_BUILD_TYPE }}-build-logs-${{ matrix.os }}-${{ matrix.cpp_compiler }}"
          path: |
            ci_build.sh.log
            install_manifest.txt
            **.log
            build/reports/**

      - name: "Upload binary artifacts"
        uses: actions/upload-artifact@v3
        #if: '${{ matrix.NEST_BUILD_TYPE }} == "FULL"'
        with:
          name: "${{ matrix.NEST_BUILD_TYPE }}-build-${{ matrix.os }}-${{ matrix.cpp_compiler }}"
          path: |
            build/**
            result/**

  build_conda:
    if: false
    needs: [build_linux]
    uses: conda-forge/nest-simulator-feedstock/.github/workflows/nest_trigger.yml@f9a89c898b4481931fe6b587c05547b42e758e46
    with:
      # see https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
      commit_name: ${{ github.ref }}
      commit_hash: ${{ github.sha }}

