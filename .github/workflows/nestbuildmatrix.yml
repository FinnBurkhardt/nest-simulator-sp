#
# detailed syntax defined in
# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions
#
name: "NEST matrix jobs"
env:
  CXX_FLAGS: "-pedantic -Wextra -Woverloaded-virtual -Wno-unknown-pragmas"
#  PYTHONPATH: ${{ github.workspace }}/build/python
on: [push, pull_request]


jobs:
  clang-format:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Install Linux system dependencies"
        run: |
          sudo apt update
          sudo apt install clang-format-9

      - name: "Run clang-format..."
        run: |
          files=$(find . \( -iname "*.h" -o -iname "*.c" -o -iname "*.cc" -o -iname "*.cpp" \) -not -path "./thirdparty/*")
          diff -u <(cat ${files}) <(clang-format-9 ${files})
    env:
      CLANG_FORMAT_FILE: ".clang-format"

  cppcheck:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Install Linux system dependencies"
        run: |
          sudo apt-get update
          sudo apt-get install cppcheck

      - name: "Run cppcheck..."
        run: |
          cppcheck --enable=all --language=c++ --std=c++11 -i sli/ --suppressions-list=.cppcheck_suppressions ./

  rstcheck:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          pip install rstcheck

      - name: "Run rstcheck..."
        run: |
          rstcheck -r doc/

  vale-action:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Vale documentation linting"
        uses: errata-ai/vale-action@v1.5.0
        # 1.0.1
        #with:
        #  config: https://raw.githubusercontent.com/terhorstd/nest-simulator/separated-checks-vale/.vale.ini
        env:
          # Required, set by GitHub actions automatically:
          # https://docs.github.com/en/actions/security-guides/automatic-token-authentication#about-the-github_token-secret
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  vale:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          sudo apt install python3-docutils
          wget --progress=dot:mega 'https://github.com/errata-ai/vale/releases/download/v2.15.2/vale_2.15.2_Linux_64-bit.tar.gz'
          echo '7528175c995818bcb88b07574dd2e17c1aad13f5676880f43927bb8f673095aa  vale_2.15.2_Linux_64-bit.tar.gz' | sha256sum -c
          tar -xzf 'vale_2.15.2_Linux_64-bit.tar.gz'

      - name: "Run vale..."
        run: |
          echo "Starting vale..."
          ./vale -v
          ./vale doc

  lychee:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      #- name: "Set up Python 3.x"
      #  uses: actions/setup-python@v3
      #  with:
      #    python-version: 3.9

      - name: "Install dependencies"
        run: |
          #sudo apt install python3-docutils
          wget --progress=dot:mega 'https://github.com/lycheeverse/lychee/releases/download/v0.8.2/lychee-v0.8.2-x86_64-unknown-linux-gnu.tar.gz'
          echo '12c27c9b6d551aea9178080d27de75ed26125b130722153399259432f723e606  lychee-v0.8.2-x86_64-unknown-linux-gnu.tar.gz' | sha256sum -c
          tar -xzf 'lychee-v0.8.2-x86_64-unknown-linux-gnu.tar.gz'

      - name: "Run lychee..."
        run: "./lychee build_support/ debian/ doc/{*.txt,*.md,devdoc,userdoc} examples/ lib* models/ nest* pynest/ testsuite/ *.md"
        # ,auto_examples
        env:
          # Required, set by GitHub actions automatically:
          # https://docs.github.com/en/actions/security-guides/automatic-token-authentication#about-the-github_token-secret
          # to overcome rate limiting
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pydocstyle:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          pip install pydocstyle

      - name: "Run pydocstyle..."
        run: |
          pydocstyle pynest/

  mypy:
    runs-on: "ubuntu-20.04"
    #needs: [pydocstyle, pycodestyle, pylint, flake8]
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install Linux system dependencies"
        run: |
          pip install mypy matplotlib numpy scipy data-science-types

      - name: "Run mypy..."
        run: |
          mypy pynest/

  pytest:
    runs-on: "ubuntu-20.04"
    if: false
    needs: [test_macos, test_linux]
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          pip install pytest pytest-cov pytest-doctestplus

      - name: "Run pytest..."
        run: |
          pytest pynest/

  pylint:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install Linux system dependencies"
        run: |
          pip install pylint

      - name: "Run pylint..."
        run: |
          pylint --jobs=$(nproc) pynest/ testsuite/pytests/*.py testsuite/regressiontests/*.py doc/userdoc/*.py

  flake8:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install dependencies"
        run: |
          pip install flake8

      - name: "Run flake8..."
        # Run flake8 on the entire repository
        run: |
          flake8 .

  sphinx-rtd:
    # as close as possible to the Readthedocs setup (system install cmake, pip install -r doc/requirements.txt)
    runs-on: "ubuntu-20.04"
    if: ${{ always() }}
    needs: [pydocstyle]
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.10

      - name: "Install dependencies"
        run: |
          pip install -r doc/requirements.txt

      - name: "Test-build documentation"
        run: |
          mkdir -pv build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../install ..
          make html |& tee sphinx-output.log

      - name: Upload artifacts
        uses: actions/upload-artifact@v2.3.0
        with:
          path: |
            build/sphinx-output.log
            build/userdoc/html/

  sphinx-conda:
    # as close as possible to the suggested user docs build in the documentation
    runs-on: "ubuntu-20.04"
    if: ${{ always() }}
    needs: [pydocstyle]
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: "3.7"

      - name: Install conda dependencies
        shell: bash -l {0}
        run: |
          conda info
          conda env create -p conda

      - name: "Test-build documentation"
        shell: bash -l {0}
        run: |
          conda activate conda/
          mkdir -pv build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../install ..
          make html |& tee sphinx-output.log

      - name: Upload artifacts
        uses: actions/upload-artifact@v2.3.0
        with:
          path: |
            build/sphinx-output.log
            build/userdoc/html/

  static_checks:
    if: false
    env:
      xNEST_BUILD_TYPE: "STATIC_CODE_ANALYSIS"
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Restore apt cache"
        uses: actions/cache@v2
        env:
          cache-name: "apt-cache"
        with:
          path: |
            !/var/cache/apt/archives/lock
            !/var/cache/apt/archives/partial
            /var/cache/apt
          key: ${{ runner.os }}-system-${{ env.cache-name }}-${{ hashFiles('**/environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-system-${{ env.cache-name }}-
            ${{ runner.os }}-system-

      - name: "Install Linux system dependencies"
        run: |
          sudo apt-get update
          # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
          sudo apt-get install libltdl-dev libreadline6-dev libncurses5-dev libgsl0-dev python3-all-dev jq libpcre3 libpcre3-dev libboost-all-dev
          sudo apt-get install openmpi-bin libopenmpi-dev libgsl0-dev tcl8.6 tcl8.6-dev tk8.6-dev
          sudo apt-get install libboost-filesystem-dev libboost-regex-dev libboost-wave-dev libboost-python-dev libboost-program-options-dev libboost-test-dev
          sudo apt-get install vera++ clang-format-9
          sudo ldconfig
          g++ --version

      - name: "Restore pip cache"
        env:
          cache-name: "pip-cache"
        uses: actions/cache@v2
        with:
          path: |
            /opt/hostedtoolcache/Python/**/site-packages/*
            $HOME/.cache/pip
          key: ${{ runner.os }}-python-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.cache-name }}-
            ${{ runner.os }}-python-

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip setuptools
          python -c "import setuptools; print('package location:', setuptools.__file__)"
          python -m pip install --force-reinstall --upgrade scipy numpy pytest pytest-timeout pytest-xdist mpi4py cython matplotlib terminaltables pandoc 'junitparser>=2'
          python -c "import pytest; print('package location:', pytest.__file__)"
          pip list

      - name: "Find changed files"
        run: |
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          echo "$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }})" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo "GITHUB_ENV = $GITHUB_ENV"
          cat $GITHUB_ENV

      - name: "Static Code Analysis"
        run: build_support/ci_build.sh
        env:
          xNEST_BUILD_TYPE: 'STATIC_CODE_ANALYSIS'
          CHANGED_FILES: ${{ env.CHANGED_FILES }}

  test_linux:
    if: ${{ always() && !contains(github.event.head_commit.message, 'ci skip') }}
    runs-on: ${{ matrix.os }}
    needs: [clang-format, cppcheck, mypy]
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04"]
        cpp_compiler: ["gcc", "clang"]
        xNEST_BUILD_TYPE: ["MINIMAL", "MPI_ONLY", "OPENMP_ONLY", "FULL"]
        exclude:
          - xNEST_BUILD_TYPE: "MINIMAL"
            cpp_compiler: "clang"
            os: "ubuntu-20.04"
          - xNEST_BUILD_TYPE: "MPI_ONLY"
            cpp_compiler: "clang"
            os: "ubuntu-20.04"
          - xNEST_BUILD_TYPE: "OPENMP_ONLY"
            cpp_compiler: "clang"
            os: "ubuntu-20.04"
          - xNEST_BUILD_TYPE: "FULL"
            cpp_compiler: "clang"
            os: "ubuntu-20.04"

    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Find changed files"
        run: |
          echo "CHANGED_FILES<<EOF" >>$GITHUB_ENV
          echo "$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }})" >>$GITHUB_ENV
          echo 'EOF' >>$GITHUB_ENV

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Restore apt cache"
        uses: actions/cache@v2
        env:
          cache-name: "apt-cache"
        with:
          path: |
            !/var/cache/apt/archives/lock
            !/var/cache/apt/archives/partial
            /var/cache/apt
          key: ${{ runner.os }}-system-${{ env.cache-name }}-${{ hashFiles('**/environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-system-${{ env.cache-name }}-
            ${{ runner.os }}-system-

      - name: "Install Linux system dependencies"
        run: |
          sudo apt-get update
          # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
          sudo apt-get install ccache
          sudo apt-get install libltdl-dev libreadline6-dev libncurses5-dev libgsl0-dev python3-all-dev jq libpcre3 libpcre3-dev libboost-all-dev
          sudo apt-get install openmpi-bin libopenmpi-dev libgsl0-dev tcl8.6 tcl8.6-dev tk8.6-dev
          sudo apt-get install libboost-filesystem-dev libboost-regex-dev libboost-wave-dev libboost-python-dev libboost-program-options-dev libboost-test-dev
          sudo ldconfig
          g++ --version

      - name: "Restore ccache"
        # Using CCache to re-use compiled objects from prior runs that have the same
        # source (hashed), compiler (mtime+size) and compile flags.
        env:
          cache-name: "ccache"
        uses: actions/cache@v2
        with:
          path: |
            $HOME/.ccache
            .ccache
            /home/runner/.ccache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.xNEST_BUILD_TYPE }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.xNEST_BUILD_TYPE }}
            ${{ runner.os }}-${{ env.cache-name }}
            ${{ runner.os }}

      - name: "Restore pip cache"
        env:
          cache-name: "pip-cache"
        uses: actions/cache@v2
        with:
          path: |
            /opt/hostedtoolcache/Python/**/site-packages/*
            $HOME/.cache/pip
          key: ${{ runner.os }}-python-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.cache-name }}-
            ${{ runner.os }}-python-

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip setuptools
          python -c "import setuptools; print('package location:', setuptools.__file__)"
          python -m pip install --force-reinstall --upgrade scipy 'junitparser>=2' numpy pytest pytest-timeout pytest-xdist mpi4py cython matplotlib terminaltables pandoc
          python -c "import pytest; print('package location:', pytest.__file__)"
          pip list

      - name: "Build NEST"
        run: |
          ccache -p
          ccache -s
          ccache -z
          ./build_support/ci_build.sh 2>&1 | tee ci_build.sh.log
          python build_support/parse_build_log.py ci_build.sh.log ${{ github.workspace }}
          ccache -s
        env:
          xNEST_BUILD_TYPE: ${{ matrix.xNEST_BUILD_TYPE }}
          CMAKE_C_COMPILER_LAUNCHER: ccache
          CMAKE_CXX_COMPILER_LAUNCHER: ccache
          CHANGED_FILES: ${{ env.CHANGED_FILES }}
          #get changed files: https://github.com/marketplace/actions/get-changed-files

      - name: "Upload install and test results"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: "test_linux-${{ matrix.os }}-${{ matrix.cpp_compiler }}-${{ matrix.xNEST_BUILD_TYPE }}-logs"
          path: |
            ci_build.sh.log
            install_manifest.txt
            **.log
            build/reports/**

  test_macos:
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
    runs-on: ${{ matrix.os }}
    needs: [clang-format, cppcheck, mypy]
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        cpp_compiler: ["clang"]
        xNEST_BUILD_TYPE: ["MINIMAL"]

    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Find changed files"
        run: |
          echo "CHANGED_FILES<<EOF" >>$GITHUB_ENV
          echo "$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }})" >>$GITHUB_ENV
          echo 'EOF' >>$GITHUB_ENV

      - name: "Set up Python 3.x"
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: "Install MacOS system dependencies"
        run: |
          brew install coreutils gsl open-mpi automake autoconf libtool
          brew info python

      - name: "Restore pip cache"
        env:
          cache-name: "pip-cache"
        uses: actions/cache@v2
        with:
          path: |
            /opt/hostedtoolcache/Python/**/site-packages/*
            $HOME/.cache/pip
          key: ${{ runner.os }}-python-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.cache-name }}-
            ${{ runner.os }}-python-

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip setuptools
          python -c "import setuptools; print('package location:', setuptools.__file__)"
          python -m pip install --force-reinstall --upgrade scipy "junitparser>=2" numpy pytest pytest-timeout pytest-xdist mpi4py cython matplotlib terminaltables pandoc
          python -c "import pytest; print('package location:', pytest.__file__)"
          pip list

      - name: "Build NEST"
        run: |
          ./build_support/ci_build.sh 2>&1 | tee ci_build.sh.log
          python build_support/parse_build_log.py ci_build.sh.log ${{ github.workspace }}
        env:
          xNEST_BUILD_TYPE: ${{ matrix.xNEST_BUILD_TYPE }}
          CHANGED_FILES: ${{ env.CHANGED_FILES }}
          #get changed files: https://github.com/marketplace/actions/get-changed-files

      - name: "Upload install and test results"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: "test_macos-${{ matrix.os }}-${{ matrix.cpp_compiler }}-${{ matrix.xNEST_BUILD_TYPE }}-logs"
          path: |
            ci_build.sh.log
            install_manifest.txt
            **.log
            build/reports/**

  build_wheel:
    if: false
    runs-on: "ubuntu-20.04"
    needs: [pytest]
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

  build_conda:
    uses: conda-forge/nest-simulator-feedstock/.github/workflows/nest_trigger.yml@f9a89c898b4481931fe6b587c05547b42e758e46
    with:
      # see https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
      commit_name: ${{ github.ref }}
      commit_hash: ${{ github.sha }}

  build_docker:
    if: false
    runs-on: "ubuntu-20.04"
    needs: [build_wheel, sphinx-rtd]
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

  deploy_docs:
    if: false
    runs-on: "ubuntu-20.04"
    needs: [sphinx-rtd]
    steps:
      - name: "Checkout repository content"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
