.. _modelsmain:

Models in NEST
==============


What we mean by `models`
------------------------

Models in the context of NEST are C++ implementations of mathematical equations that describe the characteristics and behavior of
different types of neurons and synapses, based on the relevant peer-reviewed publications for the model.

We also use the term model in relation to network models (e.g., :ref:`microcircuit <toc_microcircuit>` and `multi-area model <https://inm-6.github.io/multi-area-model/>`_). These network models
can be considered a level of complexity higher than the neuron or synapse model. We do not focus on network models here.

Find a model
------------

NEST provides a ton of models! Textbook standards like integrate-and-fire and Hodgkin-Huxley type models are available
alongside high quality implementations of models published by the neuroscience community.
The models are organized and autogenerated by keywords (e.g., :doc:`adaptive threshold <index_adaptive threshold>`, :doc:`conductance-based <index_conductance-based>` etc) in our directory. 
Models that contain a specific keyword will be listed under that word.

.. seealso::

   Discover :doc:`all the models in our directory <index>`.

Create and customize models with NESTML
---------------------------------------

Check out :doc:`NESTML <nestml:index>`, a domain-specific language for neuron and synapse models.
NESTML enables fast prototyping of new models using an easy to understand, yet powerful syntax, and combines
this with high simulation performance through the automated generation of C++ code, suitable for use in NEST Simulator.

NESTML combines:

* fast prototyping
* an easy to understand, yet powerful syntax;
* a flexible processing toolchain, written in Python;
* good simulation performance by means of code generation (C++ for NEST Simulator).

.. seealso::

  :ref:`Install NESTML with NEST <nestml>`



Model naming
------------

Neuron models
~~~~~~~~~~~~~

Neuron model names in NEST combine abbreviations that describe the dynamics and synapse specifications for that model.
They may also include author's name of a model based on a specific paper.

Example neuron model name

``iaf_cond_beta``

    an implementation of a spiking neuron using integrate and fire dynamics with
    conductance-based synapses. Incoming spike events induce a postsynaptic change
    of conductance modelled by a beta function.

Example neuron model name based on specific paper

``hh_cond_exp_traub``


    a modified version of the Hodgkin Huxley neuron model based on Traub and Miles (1991)

Synapse models
~~~~~~~~~~~~~~

Synapse models include the word synapse as last word in the model name.

Synapse models may begin with author name (e.g., ``clopath_synapsae``) or process (e.g., ``stdp_synase``).

Devices
~~~~~~~

A device name should represent its physical counter point - like a multimeter is ``multimeter``.  In general, the term ``recorder`` is used for devices
that store or generate output. The term  ``generator`` is used for devices that provide input into the simulation.


Table of model terms
~~~~~~~~~~~~~~~~~~~~~

The following table provides the NEST term used for a specific descriptor of a model along with commonly used alternative terms you may find in the literature.
Additional terms may be used to help differentiate models not included in the list below.
See the the :doc:`model directory <index>` to access the full description of each model.

.. list-table:: Common model terms
   :widths: 50 25 25
   :header-rows: 1

   * - Model description
     - NEST term
     - Alternative terms
   * - Integrate and fire
     - iaf
     - IF
   * - Adaptive exponential integrate and fire
     - aeif
     - AdEx
   * - Hodgkin Huxley
     - hh
     -
   * - Generalized integrate and fire (Spike response model)
     - gif
     - SRM
   * - Generalized leaky integrate and fire
     - glif
     -
   * -
     - amat / mat
     -
   * - Conductance based
     - cond
     - COBA
   * - Current based
     - psc
     - CUBA
   * - Hill Tononi
     - ht
     -
   * - Point process
     - pp
     -
   * - Spike timing dependent plasticity
     - stdp
     -
   * - Compartmental model
     - cm
     -
   * - Precise spike timing
     - ps
     -



