/*
 *  test_one_to_one_multi_threaded.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */


 /** @BeginDocumentation
Name: testsuite::test_one_to_one_multi_threaded Ensure spikes are transmitted on one-to-one connections with mulitple threads

Synopsis: (test_one_to_one_multi_threaded) run -> NEST exits if test fails

Description:
Connect parrot neurons driven by spike generator with one_to_one rule and ensure that spikes arrive when using
multiple threads and spike compression or not.

For certain code versions, test fails if spike compression is used and the number of neurons is odd.

Author: Hans Ekkehard Plesser
FirstVersion: Oktober 2022
SeeAlso:
*/

(unittest) run
/unittest using

skip_if_not_threaded

M_ERROR setverbosity

{
  true
  [ false true ]
  {
    /use_compression Set
    /result Set
    
    result
    [ 3  4 ] 
    {
      /num_neurons Set
	  /inner_result Set
	  
	  ResetKernel
	  
	  << 
	    /use_compressed_spikes use_compression
	    /local_num_threads 2
	  >>
	  SetKernelStatus
	  
	  /st_send [ 0.2 ] def
	  
	  /sg /spike_generator << /spike_times st_send >> Create def
	  /pre /parrot_neuron num_neurons Create def
	  /post /parrot_neuron num_neurons Create def
	  /sr /spike_recorder Create def
	  
	  sg pre Connect 
	  pre post /one_to_one Connect
	  post sr Connect
	  
	  3 Simulate
	  
	  (Use compression: ) =only use_compression =only ( Num neurons: ) =only num_neurons = 
	  (  Expected: ) =only
	  post cva Sort dup ==
	  (  Observed: ) =only
	  sr [ /events /senders ] get cva Sort dup ==
	  
	  eq inner_result and
	} 
	Fold
	
	result and
  } 
  Fold
} 
assert_or_die



endusing