# Conda environment specification for NEST Simulator
#
# This file specifies a conda environment for those who would
# like to compile NEST or build NEST documentation themselves.
# If you just want to execute NEST, you should install NEST
# directly as described in https://www.nest-simulator.org/installation.
#
#
# The environment specification below is comprehensive: it includes
# all packages required to build and run NEST with OpenMP and MPI
# parallelisation, GSL-dependent models, NumPy and Pandas-dependent
# features of PyNEST and examples requiring Matplotlib, and to run
# the NEST testsuite. It also comprises all tools required to build
# NEST documentation and to run NEST Server. The requirements for the
# documentation and server are marked in separate sections below so
# you can remove them if you would like a leaner environment.
#
# NOTE: Do NOT delete the PIP section at the end of the file. Environment files
#       allow just a single PIP section. All dependencies not satisfied by
#       conda-forge are placed there.
#
# NOTE: libneurosim, MUSIC and SIONLib are not included in this environment.
#
# To create an environment from this file, run
#
#     conda env create --name <my_env_name> --file environment.yml
#
# where <my_env_name> is a name of your choice.

name: nest_trial

channels:
  - conda-forge

dependencies:
  # Basics ------------------
  - python >= 3.8
  - pip

  # Building NEST -----------
  - cmake >= 3.12
  #- cython 
  - openmpi
  - boost >= 1.69
  - gsl >= 1.11
  - libtool
  - readline
  - hdf5

  # Testing NEST ------------
  #- pytest
  #- pytest-timeout
  #- pytest-xdist
  #- pytest-pylint
  #- pytest-mypy
  #- pytest-cov
  #- numpy
  #- pandas
  #- scipy
  #- mpi4py
  #- data-science-types
  #- h5py # moved to basics
  #- terminaltables
  #- pycodestyle
  #- pydocstyle
  #- rstcheck
  #- mypy[version='>=0.8']
  - cppcheck  # must be installed by conda

  # Working with NEST ------
  #- ipython # not included, should be installed by notebook
  #- matplotlib # moved to basics
  #- jupyter # not included, we explicitly install notebook and jupyterlab
  #- jupyterlab

  # Building NEST documentation
  #- PyYAML>=4.2b1
  - assimulo # conda, see if it can be replaced by e.g. scipy functionality
  #- breathe
  #- csvkit
  #- docutils
  - doxygen  # conda
  #- mock # if still used: "mock is now part of the Python standard library, available as unittest.mock in Python 3.3 onwards"
  #- nbsphinx
  #- numpydoc
  #- path.py  # path.py has been renamed to path and is included in standard library
  #- pydot
  #- recommonmark # seems to not be used, package was archieved in 2022 (MyST can be used as replacement)
  #- sphinx >= 4.0.2
  #- sphinx_rtd_theme
  #- tqdm
  #- yamllint

  # Running NEST Server ----
  #- flask      # should be Flask
  #- flask_cors  # should be flask-cors
  #- gunicorn
  #- requests
  #- restrictedpython # should be RestrictedPython
  #- werkzeug # installed automatically by Flask

  # PIP dependencies -- do not delete
  #- pip:
    # For testsuite
    #- junitparser >= 2
    #- clang-format == 13.0
    # For documentation
    #- example
    #- Image
    #- sphinx_autobuild
    #- sphinx_gallery
    #- sphinx-tabs
    #- sphinx_design
    #- sphinx-material
    #- sphinx-copybutton
  - pip:
    - -r requirements.txt
